plugins {
    id 'java'
    id 'war'
}

group = 'gov.fnal'
version = '3.0'

ext {
    appName = 'Frontier'
    appVersion = '3.0'
    catalinaHome = System.getenv('CATALINA_HOME') ?: '/path/to/tomcat'
}

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
}

dependencies {
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation('ch.qos.logback:logback-classic:1.4.7') {
        exclude module: 'module-info'
    }
    implementation 'org.slf4j:jul-to-slf4j:2.0.9'
    // Oracle JDBC driver (include in WAR)
    implementation 'com.oracle.database.jdbc:ojdbc11:21.11.0.0'  // Explicit version
    // Logstash
    runtimeOnly 'net.logstash.logback:logstash-logback-encoder:7.4'
    // Jakarta Servlet API (Tomcat 11 uses Jakarta EE 10)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    // Add dependencies here, e.g., servlet API
    // providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'junit:junit:4.13.2'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

war {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set(appName)
    archiveVersion.set('')
    destinationDirectory.set(file("$buildDir/dist"))
    webAppDirName = 'web'
    from configurations.runtimeClasspath.collect {
        it.isDirectory() ? it : zipTree(it)
    }
}

tasks.register('prepare') {
    doLast {
        copy {
            from 'web'
            into "$buildDir/web"
        }
    }
}

tasks.register('customClean', Delete) {
    delete "$buildDir", "$buildDir/dist", "$buildDir/test"
}

tasks.register('testinit') {
    doLast {
        delete "$buildDir/test/data", "$buildDir/test/reports"
        mkdir "$buildDir/test/data"
        mkdir "$buildDir/test/reports"
    }
}

tasks.register('testcompile') {
    dependsOn 'classes', 'testinit'
    doLast {
        copy {
            from 'src/test'
            into "$buildDir/test"
            exclude '**/*.java'
        }
    }
}

tasks.test {
    useJUnit()
    reports {
        junitXml.required.set(true)
        junitXml.outputLocation.set(file("$buildDir/test/data"))
        html.required.set(true)
        html.outputLocation.set(file("$buildDir/test/reports"))
    }
}

tasks.register('dist', Copy) {
    dependsOn 'classes'
    from 'docs'
    into "$buildDir/dist/docs"
    doLast {
        war.archiveFile.get().asFile.copyTo(file("$buildDir/dist/${appName}.war"))
    }
}

tasks.register('localinstall') {
    dependsOn 'dist'
    doLast {
        copy {
            from "$buildDir/dist/${appName}.war"
            into "$catalinaHome/webapps"
        }
    }
}

tasks.register('localuninstall') {
    doLast {
        delete "$catalinaHome/webapps/${appName}.war"
        delete "$catalinaHome/webapps/${appName}"
    }
}

