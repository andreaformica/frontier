plugins {
    id 'java'
    id 'war'
    id 'maven-publish'
}

publishing {
    publications {
        library(MavenPublication) {
            // from components.java
            from components.web
        }
    }
    repositories {
        maven {
            url = "https://gitlab.cern.ch/api/v4/projects/209928/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = System.getenv("GITLAB_TOKEN") ?: project.findProperty("gitLabPrivateToken")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

group = 'gov.fnal'
version = '4.0'
// Set java version for compilation compatibility
// sourceCompatibility = '21'
ext {
    appName = 'Frontier'
    appVersion = '4.0'
    catalinaHome = System.getenv('CATALINA_HOME') ?: '/path/to/tomcat'
}

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
}

dependencies {
    // Logging
    implementation('ch.qos.logback:logback-classic:1.4.7') {
        exclude module: 'module-info'
    }
    // If you're using logstash-logback-encoder
    implementation("net.logstash.logback:logstash-logback-encoder:7.4")

    //implementation 'org.slf4j:jul-to-slf4j:2.0.9'
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:jul-to-slf4j:2.0.7'  // For the bridge

    // Oracle JDBC driver (include in WAR)
    implementation 'com.oracle.database.jdbc:ojdbc11:21.11.0.0'  // Explicit version
    // Logstash
    runtimeOnly 'net.logstash.logback:logstash-logback-encoder:7.4'
    // Jakarta Servlet API (Tomcat 11 uses Jakarta EE 10)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    // Add dependencies here, e.g., servlet API
    // providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'junit:junit:4.13.2'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

// Define reusable paths using layout API
def distDir = layout.buildDirectory.dir('dist')
def webDir = layout.buildDirectory.dir('web')
def testDataDir = layout.buildDirectory.dir('test/data')
def testReportsDir = layout.buildDirectory.dir('test/reports')


war {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // or WARN, INCLUDE, FAIL
    archiveBaseName = appName
    archiveVersion = ''
    destinationDirectory = distDir
    webAppDirectory = file('web')
    from configurations.runtimeClasspath.collect {
        it.isDirectory() ? it : zipTree(it)
    }
}


tasks.register('prepare', Copy) {
    from 'web'
    into webDir
}

tasks.register('customClean', Delete) {
    delete layout.buildDirectory
}


tasks.register('testinit') {
    doLast {
        delete testDataDir, testReportsDir
        mkdir testDataDir
        mkdir testReportsDir
    }
}

tasks.register('testcompile', Copy) {
    dependsOn 'classes', 'testinit'
    from 'src/test'
    into layout.buildDirectory.dir('test')
    exclude '**/*.java'
}

tasks.test {
    useJUnit()
    reports {
        junitXml {
            required = true           // ✅ Correct
            outputLocation = testDataDir  // ✅ Correct
        }
        html {
            required = true          // ✅ Correct
            outputLocation = testReportsDir // ✅ Correct
        }
    }
}

tasks.register('dist', Copy) {
    dependsOn 'war'  // Make sure WAR task completes first
    from 'docs'
    into "${layout.buildDirectory.get()}/dist/docs"

    // Explicit WAR file copy
    from(war.archiveFile) {
        into "${layout.buildDirectory.get()}/dist"
        rename { "${war.archiveBaseName.get()}.war" }
    }
}

tasks.register('localinstall', Copy) {
    dependsOn 'dist'
    from "${layout.buildDirectory.get()}/dist/${war.archiveBaseName.get()}.war"
    into "${catalinaHome}/webapps"

    doLast {
        def installedWar = new File("${catalinaHome}/webapps/${war.archiveBaseName.get()}.war")
        logger.lifecycle("Installed WAR (${installedWar.length()} bytes) to ${installedWar}")
    }
}

tasks.register('localuninstall', Delete) {
    delete file("$catalinaHome/webapps/${appName}.war")
    delete file("$catalinaHome/webapps/${appName}")
}

